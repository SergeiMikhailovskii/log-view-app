[versions]
agp = "8.1.2"
kotlin = "1.9.10"
compose = "1.5.1"
compose-compiler = "1.5.3"
compose-material3 = "1.1.2"
androidx-activityCompose = "1.7.2"
debugview = "0.0.8"
decompose = "2.1.2"
essenty = "1.2.0"
parcelizeRuntime = "0.2.2"
detekt = "1.23.1"
mockmp = "1.15.0"
multiplatformSettings = "1.1.0"
ktor = "2.3.5"
multiplatformUserBehavior = "1.1.9"
firebaseDatabase = "1.10.3"
logback = "1.2.6"

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-material3 = { module = "androidx.compose.material3:material3", version.ref = "compose-material3" }
debugview = { module = "com.idfinance.kmm:debug_view", version.ref = "debugview" }
decompose = { group = "com.arkivanov.decompose", name = "decompose", version.ref = "decompose" }
decompose-essenty-lifecycle = { group = "com.arkivanov.essenty", name = "lifecycle", version.ref = "essenty" }
decompose-essenty-stateKeeper = { group = "com.arkivanov.essenty", name = "state-keeper", version.ref = "essenty" }
decompose-parcelize = { module = "com.arkivanov.parcelize.darwin:runtime", version.ref = "parcelizeRuntime" }
multiplatformSettings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettings" }
ktorClientMock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktorClientLoggingJvm = { module = "io.ktor:ktor-client-logging-jvm", version.ref = "ktor" }
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorClientJson = { module = "io.ktor:ktor-client-json", version.ref = "ktor" }
ktorClientLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktorClientAuth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktorSerialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktorClientHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorClientIOS = { module = "io.ktor:ktor-client-ios", version.ref = "ktor" }
multiplatformUserBehavior = { module = "com.idfinance.kmm:behaviour_tracker", version.ref = "multiplatformUserBehavior" }
firebaseDatabase = { module = "dev.gitlive:firebase-database", version.ref = "firebaseDatabase" }
reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

[plugins]
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
androidApplication = { id = "com.android.application" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
appdistribution = { id = "com.google.firebase.appdistribution" }
kotlinParcelize = { id = "kotlin-parcelize" }
safeArgsKotlin = { id = "androidx.navigation.safeargs.kotlin" }
crashlytics = { id = "com.google.firebase.crashlytics" }
googleServices = { id = "com.google.gms.google-services" }
android = { id = "android" }
kapt = { id = "kapt" }
androidGradle = { id = "com.android.tools.build:gradle", version.ref = "agp" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
nativeCocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
mockmp = { id = "org.kodein.mock.mockmp", version.ref = "mockmp" }
google_ksp = { id = "com.google.devtools.ksp", version = "1.9.10-1.0.13" }

[bundles]
apiDataCommonRemote = [
    "multiplatformSettings",
    "ktorClientCore",
    "multiplatformUserBehavior",
    "debugview"
]

implementationDataCommonRemote = [
    "firebaseDatabase",
    "reflect",
    "logback",
    "ktorClientContentNegotiation",
    "ktorClientJson",
    "ktorClientLogging",
    "ktorClientAuth",
    "ktorSerialization",
]

apiDataIOSRemote = [
    "ktorClientIOS",
]
